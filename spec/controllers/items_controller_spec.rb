require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ItemsController, type: :controller do

  describe "POST #create" do
    login_user

    before(:each) do 
      
    end
    context "with valid params" do
      

      it "creates a new Item" do
        set_up

        expect {
          post :create , :user_id => @user.id, item: @valid_attributes
        }.to change(Item, :count).by(1)
      end

      it "assigns a newly created item as @item" do
        set_up

        post :create , :user_id => @user.id, item: @valid_attributes
        expect(assigns(:item)).to be_a(Item)
        expect(assigns(:item)).to be_persisted
      end

      it "redirects to the created item" do
        set_up

        post :create , :user_id => @user.id, item: @valid_attributes
        expect(response).to redirect_to(@user)
      end
    end

    # EG:  This was working in the beginning before I refactor code in items_controller
    # now it is quite hard to have invalid params
    # originally, invalid params occurred when user_id is missing
    # but since I change it to use current_user.id within the controller.  

    # context "with invalid params" do
    #   it "assigns a newly created but unsaved item as @item" do
    #     set_up
        
    #     post :create , :user_id => @user.id
    #     expect(assigns(:item).valid?).to be(false)
    #     expect(assigns(:item).new_record?).to be(true)
    #   end

    #   it "re-renders the 'new' template" do
    #     set_up
        
    #     expect(response).to render_template("new")
    #   end
    # end
  end

  private

    def set_up
      @user = subject.current_user
      valid_task_name = "To do it"
      invalid_task_name = "Do it later"
      @valid_attributes = { name: valid_task_name, user_id: @user.id }
      @invalid_attributes = { name: invalid_task_name }
    end

end
